{
  "address": "0xf4E69fD2BE7cf552f89e4da878118c806c54EF5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sourceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "Convert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sourceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_targetToken",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sourceToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f0d98f427bdafc5092e0f3a0e5102644a7a1fc1abb5fee683c7eaf77b846def",
  "receipt": {
    "to": null,
    "from": "0x25f6857D69eE2606D9a188Bd296E03bA52C9D281",
    "contractAddress": "0xf4E69fD2BE7cf552f89e4da878118c806c54EF5f",
    "transactionIndex": 60,
    "gasUsed": "975381",
    "logsBloom": "0x
    "blockHash": "0xe5a18afddcf489f6118fce445788bf31b609dc3b643f65c78b7c77b0763a5376",
    "transactionHash": "0x2f0d98f427bdafc5092e0f3a0e5102644a7a1fc1abb5fee683c7eaf77b846def",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 31269550,
        "transactionHash": "0x2f0d98f427bdafc5092e0f3a0e5102644a7a1fc1abb5fee683c7eaf77b846def",
        "address": "0xf4E69fD2BE7cf552f89e4da878118c806c54EF5f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000025f6857d69ee2606d9a188bd296e03ba52c9d281"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0xe5a18afddcf489f6118fce445788bf31b609dc3b643f65c78b7c77b0763a5376"
      }
    ],
    "blockNumber": 31269550,
    "cumulativeGasUsed": "5667892",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x23c5d1164662758b3799103effe19cc064d897d6",
    "0x01a2df2ca978f9e75e2ecc56bf7158018ff123c2"
  ],
  "numDeployments": 1,
  "solcInputHash": "0cf2b29a9a3d48c7166cc4d75abc9454",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Convert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_targetToken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sourceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convert(uint256)\":{\"details\":\"Convert the tokens from the source token to the target token\",\"params\":{\"_amount\":\"The amount of tokens to convert\"}},\"deposit(uint256)\":{\"details\":\"Deposit target tokens to the contract by any address\",\"params\":{\"_amount\":\"The amount of tokens to deposit\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTokens(address,address)\":{\"details\":\"Set the address of the source token and the target token by the owner\",\"params\":{\"_sourceToken\":\"The address of the source token\",\"_targetToken\":\"The address of the target token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"details\":\"Withdraw tokens from the contract by the ownerThe owner must specify the address of the token\",\"params\":{\"_tokenAddress\":\"The address of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"convert(uint256)\":{\"notice\":\"The sender must approve the contract to transfer the tokens by himself\"},\"deposit(uint256)\":{\"notice\":\"The approving tokens will be executed by the sender\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MigrateToken.sol\":\"MigrateToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MigrateToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract MigrateToken is Ownable {\\n    // The address of the source token\\n    address public sourceToken;\\n\\n    // The address of the target token\\n    address public targetToken;\\n\\n    // event convert tokens from the source token to the target token\\n    event Convert(address user, uint256 amount, uint256 when);\\n\\n    // event contract owner deposit target tokens\\n    event Deposit(uint256 amount, uint256 when);\\n\\n    // event contract owner withdraw all tokens\\n    event Withdraw(address tokenAddress, uint256 amount, uint256 when);\\n\\n    // The constructor function, which sets the addresses of the tokens\\n    constructor(address _sourceToken, address _targetToken) {\\n        // the address of the tokens should be valid\\n        require(_sourceToken != address(0) && _targetToken != address(0), \\\"Invalid token address\\\");\\n\\n        sourceToken = _sourceToken;\\n        targetToken = _targetToken;\\n    }\\n\\n    // ADMIN FUNCTIONS (onlyOwner)\\n    /// @dev Set the address of the source token and the target token by the owner\\n    /// @param _sourceToken The address of the source token\\n    /// @param _targetToken The address of the target token\\n    function setTokens(address _sourceToken, address _targetToken) public onlyOwner {\\n        // the address of the tokens should be valid\\n        require(_sourceToken != address(0) && _targetToken != address(0), \\\"Invalid token address\\\");\\n\\n        sourceToken = _sourceToken;\\n        targetToken = _targetToken;\\n    }\\n\\n    /// @dev Deposit target tokens to the contract by any address\\n    /// @notice The approving tokens will be executed by the sender\\n    /// @param _amount The amount of tokens to deposit\\n    function deposit(uint256 _amount) public {\\n        // the amount must be greater than 0\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        // Transfer the tokens from the sender to this contract\\n        IERC20(targetToken).transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(_amount, block.timestamp);\\n    }\\n\\n    /// @dev Withdraw tokens from the contract by the owner\\n    /// @dev The owner must specify the address of the token\\n    /// @param _tokenAddress The address of the token\\n    function withdraw(address _tokenAddress) public onlyOwner {\\n        // the owner must specify the address of the token\\n        require(_tokenAddress != address(0), \\\"Invalid token address\\\");\\n\\n        // get the balance of the token\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n\\n        // the balance must be greater than 0\\n        require(balance > 0, \\\"Invalid balance\\\");\\n\\n        // Transfer the tokens from this contract to the sender\\n        IERC20(_tokenAddress).transfer(msg.sender, balance);\\n\\n        emit Withdraw(_tokenAddress, balance, block.timestamp);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n    /// @dev Convert the tokens from the source token to the target token\\n    /// @notice The sender must approve the contract to transfer the tokens by himself\\n    /// @param _amount The amount of tokens to convert\\n    function convert(uint _amount) public {\\n        // the amount must be greater than 0\\n        require(_amount > 0, \\\"Invalid amount\\\");\\n\\n        // Transfer the tokens from the sender to this contract\\n        IERC20(sourceToken).transferFrom(msg.sender, address(this), _amount);\\n\\n        // Transfer the tokens from this contract to the sender\\n        IERC20(targetToken).transfer(msg.sender, _amount);\\n\\n        emit Convert(msg.sender, _amount, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x840f63c21d58722b21456239b24137200229b2446f1b9a3288c72f4a5f273a9e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012ec380380620012ec8339818101604052810190620000379190620002c4565b620000576200004b6200018e60201b60201c565b6200019660201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015620000c25750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b62000104576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000fb906200036c565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200038e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028c826200025f565b9050919050565b6200029e816200027f565b8114620002aa57600080fd5b50565b600081519050620002be8162000293565b92915050565b60008060408385031215620002de57620002dd6200025a565b5b6000620002ee85828601620002ad565b92505060206200030185828601620002ad565b9150509250929050565b600082825260208201905092915050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b6000620003546015836200030b565b915062000361826200031c565b602082019050919050565b60006020820190508181036000830152620003878162000345565b9050919050565b610f4e806200039e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fa578063a3908e1b14610118578063b6b55f2514610134578063cbc7854e14610150578063f2fde38b1461016c57610093565b8063327107f71461009857806351cff8d9146100b65780635f8aaa69146100d2578063715018a6146100f0575b600080fd5b6100a0610188565b6040516100ad9190610a33565b60405180910390f35b6100d060048036038101906100cb9190610a7f565b6101ae565b005b6100da6103a4565b6040516100e79190610a33565b60405180910390f35b6100f86103ca565b005b6101026103de565b60405161010f9190610a33565b60405180910390f35b610132600480360381019061012d9190610ae2565b610407565b005b61014e60048036038101906101499190610ae2565b6105cc565b005b61016a60048036038101906101659190610b0f565b6106ee565b005b61018660048036038101906101819190610a7f565b610825565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b66108a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021c90610bac565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102609190610a33565b602060405180830381865afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610be1565b9050600081116102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610c5a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610321929190610c89565b6020604051808303816000875af1158015610340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103649190610cea565b507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882824260405161039893929190610d17565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103d26108a8565b6103dc6000610926565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000811161044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190610d9a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016104a993929190610dba565b6020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610cea565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161054a929190610c89565b6020604051808303816000875af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610cea565b507f9018eade4aec2a696b34b0f5459a1a7dc058389bab8e2380d880817a9e22b2133382426040516105c193929190610d17565b60405180910390a150565b6000811161060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610d9a565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161066e93929190610dba565b6020604051808303816000875af115801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190610cea565b507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5581426040516106e3929190610df1565b60405180910390a150565b6106f66108a8565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156107605750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b61079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690610bac565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61082d6108a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390610e8c565b60405180910390fd5b6108a581610926565b50565b6108b06109ea565b73ffffffffffffffffffffffffffffffffffffffff166108ce6103de565b73ffffffffffffffffffffffffffffffffffffffff1614610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90610ef8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1d826109f2565b9050919050565b610a2d81610a12565b82525050565b6000602082019050610a486000830184610a24565b92915050565b600080fd5b610a5c81610a12565b8114610a6757600080fd5b50565b600081359050610a7981610a53565b92915050565b600060208284031215610a9557610a94610a4e565b5b6000610aa384828501610a6a565b91505092915050565b6000819050919050565b610abf81610aac565b8114610aca57600080fd5b50565b600081359050610adc81610ab6565b92915050565b600060208284031215610af857610af7610a4e565b5b6000610b0684828501610acd565b91505092915050565b60008060408385031215610b2657610b25610a4e565b5b6000610b3485828601610a6a565b9250506020610b4585828601610a6a565b9150509250929050565b600082825260208201905092915050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b6000610b96601583610b4f565b9150610ba182610b60565b602082019050919050565b60006020820190508181036000830152610bc581610b89565b9050919050565b600081519050610bdb81610ab6565b92915050565b600060208284031215610bf757610bf6610a4e565b5b6000610c0584828501610bcc565b91505092915050565b7f496e76616c69642062616c616e63650000000000000000000000000000000000600082015250565b6000610c44600f83610b4f565b9150610c4f82610c0e565b602082019050919050565b60006020820190508181036000830152610c7381610c37565b9050919050565b610c8381610aac565b82525050565b6000604082019050610c9e6000830185610a24565b610cab6020830184610c7a565b9392505050565b60008115159050919050565b610cc781610cb2565b8114610cd257600080fd5b50565b600081519050610ce481610cbe565b92915050565b600060208284031215610d0057610cff610a4e565b5b6000610d0e84828501610cd5565b91505092915050565b6000606082019050610d2c6000830186610a24565b610d396020830185610c7a565b610d466040830184610c7a565b949350505050565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000610d84600e83610b4f565b9150610d8f82610d4e565b602082019050919050565b60006020820190508181036000830152610db381610d77565b9050919050565b6000606082019050610dcf6000830186610a24565b610ddc6020830185610a24565b610de96040830184610c7a565b949350505050565b6000604082019050610e066000830185610c7a565b610e136020830184610c7a565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e76602683610b4f565b9150610e8182610e1a565b604082019050919050565b60006020820190508181036000830152610ea581610e69565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ee2602083610b4f565b9150610eed82610eac565b602082019050919050565b60006020820190508181036000830152610f1181610ed5565b905091905056fea264697066735822122009b53b97b08c94561095c6794e08e796ce8a6f12598db076a1353a9119ebba2564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fa578063a3908e1b14610118578063b6b55f2514610134578063cbc7854e14610150578063f2fde38b1461016c57610093565b8063327107f71461009857806351cff8d9146100b65780635f8aaa69146100d2578063715018a6146100f0575b600080fd5b6100a0610188565b6040516100ad9190610a33565b60405180910390f35b6100d060048036038101906100cb9190610a7f565b6101ae565b005b6100da6103a4565b6040516100e79190610a33565b60405180910390f35b6100f86103ca565b005b6101026103de565b60405161010f9190610a33565b60405180910390f35b610132600480360381019061012d9190610ae2565b610407565b005b61014e60048036038101906101499190610ae2565b6105cc565b005b61016a60048036038101906101659190610b0f565b6106ee565b005b61018660048036038101906101819190610a7f565b610825565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101b66108a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021c90610bac565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102609190610a33565b602060405180830381865afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a19190610be1565b9050600081116102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90610c5a565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610321929190610c89565b6020604051808303816000875af1158015610340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103649190610cea565b507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882824260405161039893929190610d17565b60405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103d26108a8565b6103dc6000610926565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000811161044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190610d9a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016104a993929190610dba565b6020604051808303816000875af11580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190610cea565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161054a929190610c89565b6020604051808303816000875af1158015610569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058d9190610cea565b507f9018eade4aec2a696b34b0f5459a1a7dc058389bab8e2380d880817a9e22b2133382426040516105c193929190610d17565b60405180910390a150565b6000811161060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610d9a565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161066e93929190610dba565b6020604051808303816000875af115801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190610cea565b507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5581426040516106e3929190610df1565b60405180910390a150565b6106f66108a8565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156107605750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b61079f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079690610bac565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b61082d6108a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390610e8c565b60405180910390fd5b6108a581610926565b50565b6108b06109ea565b73ffffffffffffffffffffffffffffffffffffffff166108ce6103de565b73ffffffffffffffffffffffffffffffffffffffff1614610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b90610ef8565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1d826109f2565b9050919050565b610a2d81610a12565b82525050565b6000602082019050610a486000830184610a24565b92915050565b600080fd5b610a5c81610a12565b8114610a6757600080fd5b50565b600081359050610a7981610a53565b92915050565b600060208284031215610a9557610a94610a4e565b5b6000610aa384828501610a6a565b91505092915050565b6000819050919050565b610abf81610aac565b8114610aca57600080fd5b50565b600081359050610adc81610ab6565b92915050565b600060208284031215610af857610af7610a4e565b5b6000610b0684828501610acd565b91505092915050565b60008060408385031215610b2657610b25610a4e565b5b6000610b3485828601610a6a565b9250506020610b4585828601610a6a565b9150509250929050565b600082825260208201905092915050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b6000610b96601583610b4f565b9150610ba182610b60565b602082019050919050565b60006020820190508181036000830152610bc581610b89565b9050919050565b600081519050610bdb81610ab6565b92915050565b600060208284031215610bf757610bf6610a4e565b5b6000610c0584828501610bcc565b91505092915050565b7f496e76616c69642062616c616e63650000000000000000000000000000000000600082015250565b6000610c44600f83610b4f565b9150610c4f82610c0e565b602082019050919050565b60006020820190508181036000830152610c7381610c37565b9050919050565b610c8381610aac565b82525050565b6000604082019050610c9e6000830185610a24565b610cab6020830184610c7a565b9392505050565b60008115159050919050565b610cc781610cb2565b8114610cd257600080fd5b50565b600081519050610ce481610cbe565b92915050565b600060208284031215610d0057610cff610a4e565b5b6000610d0e84828501610cd5565b91505092915050565b6000606082019050610d2c6000830186610a24565b610d396020830185610c7a565b610d466040830184610c7a565b949350505050565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000610d84600e83610b4f565b9150610d8f82610d4e565b602082019050919050565b60006020820190508181036000830152610db381610d77565b9050919050565b6000606082019050610dcf6000830186610a24565b610ddc6020830185610a24565b610de96040830184610c7a565b949350505050565b6000604082019050610e066000830185610c7a565b610e136020830184610c7a565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e76602683610b4f565b9150610e8182610e1a565b604082019050919050565b60006020820190508181036000830152610ea581610e69565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ee2602083610b4f565b9150610eed82610eac565b602082019050919050565b60006020820190508181036000830152610f1181610ed5565b905091905056fea264697066735822122009b53b97b08c94561095c6794e08e796ce8a6f12598db076a1353a9119ebba2564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convert(uint256)": {
        "details": "Convert the tokens from the source token to the target token",
        "params": {
          "_amount": "The amount of tokens to convert"
        }
      },
      "deposit(uint256)": {
        "details": "Deposit target tokens to the contract by any address",
        "params": {
          "_amount": "The amount of tokens to deposit"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTokens(address,address)": {
        "details": "Set the address of the source token and the target token by the owner",
        "params": {
          "_sourceToken": "The address of the source token",
          "_targetToken": "The address of the target token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "details": "Withdraw tokens from the contract by the ownerThe owner must specify the address of the token",
        "params": {
          "_tokenAddress": "The address of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "convert(uint256)": {
        "notice": "The sender must approve the contract to transfer the tokens by himself"
      },
      "deposit(uint256)": {
        "notice": "The approving tokens will be executed by the sender"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MigrateToken.sol:MigrateToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 220,
        "contract": "contracts/MigrateToken.sol:MigrateToken",
        "label": "sourceToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 222,
        "contract": "contracts/MigrateToken.sol:MigrateToken",
        "label": "targetToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}